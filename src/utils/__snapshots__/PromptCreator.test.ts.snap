// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PromptCreator should create a prompt for an intent correctly 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a mobile application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

A snapshot image is attached for visual reference.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent, the view hierarchy, and the snapshot image to understand the required action.
2. Determine if the intent can be fully validated visually using the snapshot image.
3. If the intent can be visually asserted and passes the visual check, return code that only comments on the visual test.
4. If the visual assertion fails, return code that throws an informative error explaining the failure.
5. If visual validation is not possible or insufficient, generate the minimal executable code required to perform the intent using the available API.
6. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
7. Wrap the generated code with backticks, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of returning a commented visual test if the visual assertion passes:
\`\`\`typescript
// Visual assertion passed based on the snapshot image.
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should handle when no snapshot image is attached 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a mobile application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. If visual validation is not possible or insufficient, generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Wrap the generated code with backticks, without any additional formatting.
5. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should include previous intents in the context 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a mobile application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Previous intents

#### Step 1
- Intent: "navigate to login screen"
- Generated code:
\`\`\`
await element(by.id("login")).tap();
\`\`\`

#### Step 2
- Intent: "enter username"
- Generated code:
\`\`\`
await element(by.id("username")).typeText("john_doe");
\`\`\`


## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. If visual validation is not possible or insufficient, generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Wrap the generated code with backticks, without any additional formatting.
5. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;
